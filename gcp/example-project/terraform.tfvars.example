# GCP Terraform Variables Example
# Rename this file to terraform.tfvars and update with your values

# 项目配置
project_id   = "your-project-id"
project_name = "your-project-name"

# 默认区域配置
default_region = "asia-southeast1"
default_zone   = "asia-southeast1-a"

# 当前 VPC 配置
current_vpc_name = "your-vpc-name"

# 多区域子网配置
subnet_configs = {
  "revosurge-db" = {
    region             = "asia-southeast1"
    primary_ipv4_range = "172.20.0.0/24"
  }
  "revosurge-middleware" = {
    region             = "asia-southeast1"
    primary_ipv4_range = "172.20.1.0/24"
  }
  "revosurge-gke" = {
    region             = "asia-southeast1"
    primary_ipv4_range = "172.20.2.0/24"
  }
  "algorithm-ew1" = {
    region             = "europe-west2"
    primary_ipv4_range = "172.20.10.0/24"
  }
  "algorithm-uc1" = {
    region             = "us-central1"
    primary_ipv4_range = "172.20.11.0/24"
  }
  "algorithm-as1" = {
    region             = "asia-southeast1"
    primary_ipv4_range = "172.20.12.0/24"
  }
  "algorithm-ew2" = {
    region             = "europe-west2"
    primary_ipv4_range = "172.20.13.0/24"
  }
}

# 防火墙规则配置
firewall_rules = {
  "allow-ssh" = {
    name          = "your-project-name-allow-ssh"
    description   = "Allow SSH access to instances with specific tags"
    priority      = 1000
    source_ranges = ["0.0.0.0/0"]
    target_tags   = ["k8s-manager", "algorithm", "retool"]
    allow = [
      {
        protocol = "tcp"
        ports    = ["22"]
      }
    ]
  }
  "allow-algorithm" = {
    name          = "your-project-name-allow-algorithm"
    description   = "Allow external requests to algorithm instances"
    priority      = 1000
    source_ranges = ["0.0.0.0/0"]
    target_tags   = ["algorithm"]
    allow = [
      {
        protocol = "tcp"
        ports    = ["8000", "8080"]
      }
    ]
  }
  "allow-internal" = {
    name          = "your-project-name-allow-internal"
    description   = "Allow all internal communication within 172.0.0.0/16 network"
    priority      = 65534
    source_ranges = ["172.0.0.0/16"]
    allow = [
      {
        protocol = "tcp"
        ports    = ["0-65535"]
      },
      {
        protocol = "udp"
        ports    = ["0-65535"]
      },
      {
        protocol = "icmp"
        ports    = null
      }
    ]
  }
  "your-project-name-allow-retool-server" = {
    name          = "your-project-name-allow-retool-server"
    description   = "Allow external requests to retool-server instances"
    priority      = 1000
    source_ranges = ["0.0.0.0/0"]
    target_tags   = ["retool"]
    allow = [
      {
        protocol = "tcp"
        ports    = ["80", "3000"]
      }
    ]
  }
}

# 示例：多个防火墙规则配置
# firewall_rules = {
#   "allow-ssh" = {
#     name          = "my-project-allow-ssh"
#     description   = "Allow SSH access"
#     priority      = 1000
#     source_ranges = ["0.0.0.0/0"]
#     target_tags   = ["ssh-enabled"]
#     allow = [
#       {
#         protocol = "tcp"
#         ports    = ["22"]
#       }
#     ]
#   }
#   "allow-http-https" = {
#     name          = "my-project-allow-web"
#     description   = "Allow HTTP and HTTPS traffic"
#     priority      = 1000
#     source_ranges = ["0.0.0.0/0"]
#     target_tags   = ["web-server"]
#     allow = [
#       {
#         protocol = "tcp"
#         ports    = ["80", "443"]
#       }
#     ]
#   }
#   "allow-internal-all" = {
#     name          = "my-project-allow-internal"
#     description   = "Allow all internal traffic"
#     priority      = 65534
#     source_ranges = ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
#     allow = [
#       {
#         protocol = "tcp"
#         ports    = ["0-65535"]
#       },
#       {
#         protocol = "udp"
#         ports    = ["0-65535"]
#       },
#       {
#         protocol = "icmp"
#       }
#     ]
#   }
# }

# VM 实例配置 - 支持每个实例完全定制化配置
vm_instances = {
  "retool-server" = {
    instances = [
      {
        name          = "retool-server"
        machine_type  = "custom-8-16384"
        region        = "asia-southeast1"
        zone          = "asia-southeast1-a"
        image_family  = "ubuntu-2204-lts"
        image_project = "ubuntu-os-cloud"
        disk_size     = 50
        disk_type     = "pd-balanced"
        network_tags  = ["retool"]
        network       = "revosurge-uat"
        subnetwork    = "revosurge-middleware"
      }
    ]
  }
  "algorithm-ew2-vm1" = {
    instances = [
      {
        name          = "algorithm-ew2-vm1"
        machine_type  = "custom-8-16384"
        region        = "europe-west2"
        zone          = "europe-west2-b"
        image_family  = "ubuntu-2204-lts"
        image_project = "ubuntu-os-cloud"
        disk_size     = 50
        disk_type     = "pd-balanced"
        network_tags  = ["algorithm"]
        network       = "your-vpc-name"
        subnetwork    = "algorithm-ew2"
      },
    ]
  }
  "algorithm-as1-vm1" = {
    instances = [
      {
        name          = "algorithm-as1-vm1"
        machine_type  = "ccustom-8-16384"
        region        = "asia-southeast1"
        zone          = "asia-southeast1-a"
        image_family  = "ubuntu-2204-lts"
        image_project = "ubuntu-os-cloud"
        disk_size     = 50
        disk_type     = "pd-balanced"
        network_tags  = ["algorithm"]
        network       = "your-vpc-name"
        subnetwork    = "algorithm-as1"
      },
    ]
  }
  "algorithm-uc1-vm1" = {
    instances = [
      {
        name          = "algorithm-uc1-vm1"
        machine_type  = "custom-8-16384"
        region        = "us-central1"
        zone          = "us-central1-a"
        image_family  = "ubuntu-2204-lts"
        image_project = "ubuntu-os-cloud"
        disk_size     = 50
        disk_type     = "pd-balanced"
        network_tags  = ["algorithm"]
        network       = "your-vpc-name"
        subnetwork    = "algorithm-uc1"
      },
    ]
  }
}

# 示例：多个 VM 实例配置
# vm_instances = {
#   "algorithm-ew1-vm1" = {
#     instances = [
#       {
#         name          = "algorithm-ew1-vm1"
#         machine_type  = "custom-8-16384"  # 8 vCPU, 16GB RAM
#         region        = "europe-west1"
#         zone          = "europe-west1-a"
#         image_family  = "ubuntu-2204-lts"
#         image_project = "ubuntu-os-cloud"
#         disk_size     = 20
#         disk_type     = "pd-balanced"
#         network_tags  = ["algorithm"]
#         network       = "your-vpc-name"
#         subnetwork    = "algorithm-ew1"
#       }
#     ]
#   }
#   "algorithm-ew1-vm2" = {
#     instances = [
#       {
#         name          = "algorithm-ew1-vm2"
#         machine_type  = "custom-8-16384"  # 8 vCPU, 16GB RAM
#         region        = "europe-west1"
#         zone          = "europe-west1-b"
#         image_family  = "ubuntu-2204-lts"
#         image_project = "ubuntu-os-cloud"
#         disk_size     = 20
#         disk_type     = "pd-balanced"
#         network_tags  = ["algorithm"]
#         network       = "your-vpc-name"
#         subnetwork    = "algorithm-ew1"
#       }
#     ]
#   }
#   "algorithm-uc1-vm1" = {
#     instances = [
#       {
#         name          = "algorithm-uc1-vm1"
#         machine_type  = "custom-8-16384"  # 8 vCPU, 16GB RAM
#         region        = "us-central1"
#         zone          = "us-central1-a"
#         image_family  = "ubuntu-2204-lts"
#         image_project = "ubuntu-os-cloud"
#         disk_size     = 20
#         disk_type     = "pd-balanced"
#         network_tags  = ["algorithm"]
#         network       = "your-vpc-name"
#         subnetwork    = "algorithm-uc1"
#       }
#     ]
#   }
#   "algorithm-as1-vm1" = {
#     instances = [
#       {
#         name          = "algorithm-as1-vm1"
#         machine_type  = "custom-8-16384"  # 8 vCPU, 16GB RAM
#         region        = "asia-southeast1"
#         zone          = "asia-southeast1-a"
#         image_family  = "ubuntu-2204-lts"
#         image_project = "ubuntu-os-cloud"
#         disk_size     = 20
#         disk_type     = "pd-balanced"
#         network_tags  = ["algorithm"]
#         network       = "your-vpc-name"
#         subnetwork    = "algorithm-as1"
#       }
#     ]
#   }
# }

# Instance Group 配置
instance_groups = {
  "algorithm-ew2-a-ig" = {
    name        = "algorithm-ew2-a-ig"
    description = "Instance group for algorithm VMs in europe-west2-a"
    zone        = "europe-west2-a"
    instances   = ["algorithm-ew2-vm1"]  # VM instance keys
    named_ports = [
      {
        name = "http" # backend-rtb-adaptor
        port = 8080
      },
      {
        name = "revo-ai" # revo-ai
        port = 8000
      }
    ]
  }
}

# 示例：多个 Instance Group 配置
# instance_groups = {
#   "algorithm-ew1-group" = {
#     name        = "algorithm-ew1-ig"
#     description = "Instance group for algorithm VMs in europe-west1-a"
#     zone        = "europe-west1-a"
#     instances   = ["algorithm-ew1-vm1", "algorithm-ew1-vm2"]  # VM instance keys (对应 vm_instances 的 key)
#     named_ports = [
#       {
#         name = "backend-rtb-adaptor"
#         port = 8080
#       },
#       {
#         name = "revo-ai"
#         port = 8000
#       }
#     ]
#   }
#   "algorithm-uc1-group" = {
#     name        = "algorithm-uc1-ig"
#     description = "Instance group for algorithm VMs in us-central1-a"
#     zone        = "us-central1-a"
#     instances   = ["algorithm-uc1-vm1"]  # VM instance keys (对应 vm_instances 的 key)
#     named_ports = [
#       {
#         name = "http" # backend-rtb-adaptor
#         port = 8080
#       },
#       {
#         name = "revo-ai"
#         port = 8000
#       }
#     ]
#   }
# }

# Load Balancer 配置
lb_name                  = "ortb-lb"
lb_external_ip_name      = "ortb-lb-external-ip"
lb_forwarding_rule_name  = "ortb-lb-forwarding-rule"
lb_backend_service_name  = "ortb-global-backend"
lb_health_check_name     = "ortb-health-check"
lb_ssl_certificate_name  = "ortb-ssl-cert"
lb_ssl_certificate_domains = ["your.example.com"]

# Load Balancer Backends 配置
lb_backends = {
  "backend-ew2-a" = {
    instance_group_key = "algorithm-ew2-a-ig"  # 对应 instance_groups 的 key
    balancing_mode     = "UTILIZATION"
    capacity_scaler    = 1.0
    max_utilization    = 0.8
  }
}

# 示例：多个 Backend 配置
# lb_backends = {
#   "backend-ew1" = {
#     instance_group_key = "algorithm-ew1-group"
#     balancing_mode     = "UTILIZATION"
#     capacity_scaler    = 1.0
#     max_utilization    = 0.8
#   }
#   "backend-ew2" = {
#     instance_group_key = "algorithm-ew2-a"
#     balancing_mode     = "UTILIZATION"
#     capacity_scaler    = 1.0
#     max_utilization    = 0.8
#   }
#   "backend-uc1" = {
#     instance_group_key = "algorithm-uc1-group"
#     balancing_mode     = "UTILIZATION"
#     capacity_scaler    = 1.0
#     max_utilization    = 0.8
#   }
# }

# ========================================
# GCS Bucket 配置
# ========================================

gcs_buckets = {
  "adwave-uat" = {
    name               = "adwave-uat"
    location           = "asia-southeast1"  # Region (单可用区)
    storage_class      = "STANDARD"
    versioning_enabled = false
    labels = {
      environment = "uat"
      managed_by  = "terraform"
    }
    # 可选：生命周期规则
    lifecycle_rules = []
  }
}

# 示例：多个 Bucket 配置
# gcs_buckets = {
#   "adwave-uat" = {
#     name               = "adwave-uat"
#     location           = "asia-southeast1"
#     storage_class      = "STANDARD"
#     versioning_enabled = false
#     labels = {
#       environment = "uat"
#     }
#   }
#   "adwave-prod" = {
#     name               = "adwave-prod"
#     location           = "us-central1"
#     storage_class      = "STANDARD"
#     versioning_enabled = true
#     labels = {
#       environment = "production"
#     }
#     # 生命周期规则示例
#     lifecycle_rules = [
#       {
#         action = {
#           type          = "SetStorageClass"
#           storage_class = "NEARLINE"
#         }
#         condition = {
#           age                   = 30
#           matches_storage_class = ["STANDARD"]
#         }
#       }
#     ]
#   }
# }

# ========================================
# IAM Service Account 配置
# ========================================

service_accounts = {
  "applications" = {
    account_id       = "applications-dev"
    display_name     = "applications-dev"
    description      = "Service account for development applications"
    roles = [
      "roles/firebasestorage.serviceAgent"  # Cloud Storage for Firebase Service Agent
    ]
    create_key       = true   # 创建 Service Account Key
    save_key_to_file = true   # 保存 Key 到文件
  }
}

# 示例：多个 Service Account 配置
# service_accounts = {
#   "applications-dev" = {
#     account_id       = "applications-uat"
#     display_name     = "applications-uat"
#     description      = "Service account for uat applications"
#     roles = [
#       "roles/firebasestorage.serviceAgent",
#       "roles/storage.objectAdmin"
#     ]
#     create_key       = true
#     save_key_to_file = true
#   }
#   "applications-prod" = {
#     account_id       = "applications-prod"
#     display_name     = "applications-prod"
#     description      = "Service account for uat applications"
#     roles = [
#       "roles/firebasestorage.serviceAgent",
#       "roles/storage.objectViewer"
#     ]
#     create_key       = true
#     save_key_to_file = true
#   }
# }

# 网络配置说明：
# 防火墙规则支持多协议、多端口、自定义优先级和目标标签
# VM 使用静态外部 IP 地址，每个实例完全定制化配置
# Instance Group 支持多个实例和自定义命名端口
# Load Balancer 支持多个 Backend Instance Groups